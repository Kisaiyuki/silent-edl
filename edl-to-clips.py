#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Edit Decision List to MP4 clips (No transcoding)
# Copyright 2022 Kisai.

# READ FIRST:
# This is UNLIKELY the tool you want to use, this will generate a really
# poor video as-is. Please understand what keyframes and GOP's are.
# If you do not have a Video NLE, this will let you use just FFMPEG, at
# the expense of not being able to control exactly where the keyframes land


# The following program was written by Kisai for use by Vtuber's
#
# Permission to use this program is subject to the following rules:
# 1. Videos must be free and public to watch (eg Youtube, bilibili, 
#    niconico douga, tiktok)
# 2. No support or warranty will be provided
# 3. No bug reports or patches will be accepted
#
# Use of this software is entirely at your own risk. It is built with 
# python and libraries that are free to use on the internet. If you want to
# change, optimize or refactor the functionality please fork this project 
# instead without removing the above rules. I am not interested in 
# expanding or refactoring this.

# Requirements:
# - Original non-transcoded MP4/MOV/ISMV file 
# - EDL file for the same MP4/MOV/ISMV
# Optional:
# - subtitle (SRT/VTT) file
# DO NOT:
# - download transcoded videos from twitch/youtube/etc, while they will
#   technically work, they have already incurred two generation losses.
#   Use only the file generated by your device or recorded directly by 
#   OBS
#   
# - use other trancoding scripts (eg jumpcutter), as this will add two
#   generation losses (once from the intermediate files, and once more
#   in the final file.

# if you need FFMPEG for Windows: 
#  https://www.gyan.dev/ffmpeg/builds/
# if you need python for Windows: 
#  https://www.python.org/downloads/release/python-3713/

# Footnote:
# This was setup to mimic the entire "import edl into davinci", 
# "delete gaps", export process. It will not produce a nice video file
# as the timestamps will not be accurate. You have been warned.
# 
# You should be transcoding from the video clips. It's unlikely that
# that the clips will work in all video NLE's due to negative time used
# by ffmpeg in order to retain the keyframes. What this produces as the
# final EDIT mp4 file should be considered a draft.

import sys
import os
import re
import pandas as pd
import subprocess
import configparser


def timecode_to_ms(timecode,fps):
    x = timecode.split(":")
    print (float(x[-1])*((1/fps)*1000))
    ms=float(x[-1])*((1/fps)*1000)
    x[-4]=int(x[-4])
    x[-3]=int(x[-3])
    x[-2]=int(x[-2])
    x[-1]=ms
    return x

def timestamp_to_mstime(timestamp):

    x=int(timestamp[0]*3600000+timestamp[1]*60000+timestamp[2]*1000+timestamp[3])
    return x

def convert_from_ms( milliseconds ): 
	seconds, milliseconds = divmod(milliseconds,1000) 
	minutes, seconds = divmod(seconds, 60) 
	hours, minutes = divmod(minutes, 60) 
	
	return hours, minutes, seconds, milliseconds
    

try:
    from configparser import ConfigParser
except ImportError:
    from ConfigParser import ConfigParser  


config = ConfigParser()
config['work']={'framerate':60.0,}
config.read('silent-edl.ini')
framerate = config.getfloat('work', 'framerate')

if len(sys.argv) == 1:
    print("edl-to-clips 1.0 written by Kisai \n")
    print("Input video file must have an EDL file with the same name")
    print("USAGE: \n")
    print("edl-to-clips INPUT.MP4")




for inputfile in sys.argv[1:]:

    work_file=f"__{inputfile}"
    with open(inputfile) as fd:
        rd = pd.read_table(f'{inputfile}.edl', delimiter=' ',skipinitialspace=True,skiprows=2, skip_blank_lines=True,names=["Edit Num", "Reel name","Channel","Trans","Source IN","Source OUT","Record In","Record Out"]) 

        print(rd)
        concatlist=""
        for index, row in rd.iterrows():
            if row[0].isdigit():
            
                intimestampA=timestamp_to_mstime(timecode_to_ms(row[4],framerate))
                intimestampB=intimestampA
            
                (shour,smin,ssec,smsec)=convert_from_ms(intimestampB)
                
                outtimestampA=timestamp_to_mstime(timecode_to_ms(row[5],framerate))
                outtimestampB=outtimestampA-intimestampA
                (thour,tmin,tsec,tmsec)=convert_from_ms(outtimestampB)
            
                cue=str(row[0])
                smsec=int(smsec)
                tmsec=int(tmsec)
                print(row[0],row[4], row[5])
                
                concatlist=concatlist+f"file '{cue}{work_file}'\n"
                videosettings=f'-ss {shour}:{smin}:{ssec}.{smsec} -i "{inputfile}" -t {thour}:{tmin}:{tsec}.{tmsec}'
                captionsettings=""
                if os.path.exists(f"{inputfile}.vtt") is True:
                    captionsettings=f'-ss {shour}:{smin}:{ssec}.{smsec} -i "{inputfile}.vtt" -t {thour}:{tmin}:{tsec}.{tmsec}   -map 0 -map 1 -c copy -c:s:0 mov_text -metadata:s:s:0 language=eng'
                else if os.path.exists(f"{inputfile}.srt") is True:
                    captionsettings=f'-ss {shour}:{smin}:{ssec}.{smsec} -i "{inputfile}.srt" -t {thour}:{tmin}:{tsec}.{tmsec}   -map 0 -map 1 -c copy -c:s:0 mov_text -metadata:s:s:0 language=eng'
                else
                    captionsettings=""
                
                command = f'ffmpeg  {videosettings} {captionsettings}  -movflags faststart -hide_banner -fps_mode drop -y  -fflags +genpts "{cue}{work_file}"'
                print(command)
                os.system(command)
                
                
        text_file = open("concatlist.txt", "w")
        
        writtenbytes=text_file.write(concatlist)
        text_file.close()       
        command = f'ffmpeg -f concat -safe 0 -i concatlist.txt -acodec copy -vcodec copy -scodec copy -y -fflags +genpts EDIT__{inputfile}'
        os.system(command)


